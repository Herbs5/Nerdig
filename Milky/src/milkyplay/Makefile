# Makefile.in generated by automake 1.11 from Makefile.am.
# src/milkyplay/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.





pkgdatadir = $(datadir)/milkytracker
pkgincludedir = $(includedir)/milkytracker
pkglibdir = $(libdir)/milkytracker
pkglibexecdir = $(libexecdir)/milkytracker
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
subdir = src/milkyplay
DIST_COMMON = $(noinst_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in
ACLOCAL_M4 = 
am__aclocal_m4_deps = 
am__configure_deps = 
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
LIBRARIES = $(noinst_LIBRARIES)
AR = ar
ARFLAGS = cru
libmilkyplay_a_AR = $(AR) $(ARFLAGS)
libmilkyplay_a_LIBADD =
am_libmilkyplay_a_OBJECTS = AudioDriverBase.$(OBJEXT) \
	AudioDriverManager.$(OBJEXT) AudioDriver_NULL.$(OBJEXT) \
	AudioDriver_WAVWriter.$(OBJEXT) ChannelMixer.$(OBJEXT) \
	ExporterXM.$(OBJEXT) LittleEndian.$(OBJEXT) \
	Loader669.$(OBJEXT) LoaderAMF.$(OBJEXT) LoaderAMS.$(OBJEXT) \
	LoaderCBA.$(OBJEXT) LoaderDBM.$(OBJEXT) LoaderDIGI.$(OBJEXT) \
	LoaderDSM.$(OBJEXT) LoaderDTM.$(OBJEXT) LoaderFAR.$(OBJEXT) \
	LoaderGDM.$(OBJEXT) LoaderIMF.$(OBJEXT) LoaderIT.$(OBJEXT) \
	LoaderMDL.$(OBJEXT) LoaderMID.$(OBJEXT) LoaderMOD.$(OBJEXT) LoaderMTM.$(OBJEXT) \
	LoaderMXM.$(OBJEXT) LoaderOKT.$(OBJEXT) LoaderPLM.$(OBJEXT) \
	LoaderPSM.$(OBJEXT) LoaderPTM.$(OBJEXT) LoaderS3M.$(OBJEXT) \
	LoaderSTM.$(OBJEXT) LoaderULT.$(OBJEXT) LoaderUNI.$(OBJEXT) \
	LoaderXM.$(OBJEXT) MasterMixer.$(OBJEXT) midifile.$(OBJEXT) \
	PlayerBase.$(OBJEXT) PlayerGeneric.$(OBJEXT) PlayerSTD.$(OBJEXT) \
	ResamplerFactory.$(OBJEXT) SampleLoaderAIFF.$(OBJEXT) \
	SampleLoaderALL.$(OBJEXT) SampleLoaderAbstract.$(OBJEXT) \
	SampleLoaderGeneric.$(OBJEXT) SampleLoaderIFF.$(OBJEXT) \
	SampleLoaderWAV.$(OBJEXT) XIInstrument.$(OBJEXT) \
	XMFile.$(OBJEXT) XModule.$(OBJEXT) AudioDriver_ALSA.$(OBJEXT) \
	AudioDriver_JACK.$(OBJEXT) AudioDriver_SDL.$(OBJEXT)
libmilkyplay_a_OBJECTS = $(am_libmilkyplay_a_OBJECTS)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
SOURCES = $(libmilkyplay_a_SOURCES)
DIST_SOURCES = $(libmilkyplay_a_SOURCES)
HEADERS = $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = aclocal-1.11
ALSA_CFLAGS = 
ALSA_LIBS =  -lasound -lm -ldl -lpthread
AMTAR = tar
AUTOCONF = autoconf
AUTOHEADER = autoheader
AUTOMAKE = automake-1.11
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS =  -D__FORCE_SDL_AUDIO__
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = -lz -lasound -lm -ldl -lpthread
LTLIBOBJS = 
MAKEINFO = makeinfo
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = milkytracker
PACKAGE_BUGREPORT = www.milkytracker.net
PACKAGE_NAME = MilkyTracker
PACKAGE_STRING = MilkyTracker 0.90.85
PACKAGE_TARNAME = milkytracker
PACKAGE_URL = 
PACKAGE_VERSION = 0.90.85
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
RANLIB = ranlib
RTMIDI = ../midi/libmidi.a
RTMIDI_DIR = midi
SDL_CFLAGS = -I/usr/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT
SDL_CONFIG = /usr/bin/sdl-config
SDL_LIBS = -L/usr/lib/x86_64-linux-gnu -lSDL
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VERSION = 0.90.85
ZZIP_CFLAGS = 
ZZIP_LIBS = 
abs_builddir = /media/sda3/MilkyTracker-32+lr/src/milkyplay
abs_srcdir = /media/sda3/MilkyTracker-32+lr/src/milkyplay
abs_top_builddir = /media/sda3/MilkyTracker-32+lr
abs_top_srcdir = /media/sda3/MilkyTracker-32+lr
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build_alias = 
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host_alias = 
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /media/sda3/MilkyTracker-32+lr/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..
noinst_LIBRARIES = libmilkyplay.a
libmilkyplay_a_SOURCES = AudioDriverBase.cpp AudioDriverManager.cpp \
AudioDriver_NULL.cpp AudioDriver_WAVWriter.cpp ChannelMixer.cpp ExporterXM.cpp \
LittleEndian.cpp Loader669.cpp LoaderAMF.cpp LoaderAMS.cpp LoaderCBA.cpp \
LoaderDBM.cpp LoaderDIGI.cpp LoaderDSM.cpp LoaderDTM.cpp LoaderFAR.cpp \
LoaderGDM.cpp LoaderIMF.cpp LoaderIT.cpp LoaderMDL.cpp LoaderMID.cpp LoaderMOD.cpp \
LoaderMTM.cpp LoaderMXM.cpp LoaderOKT.cpp LoaderPLM.cpp LoaderPSM.cpp \
LoaderPTM.cpp LoaderS3M.cpp LoaderSTM.cpp LoaderULT.cpp LoaderUNI.cpp \
LoaderXM.cpp MasterMixer.cpp midifile.c PlayerBase.cpp PlayerGeneric.cpp PlayerSTD.cpp \
ResamplerFactory.cpp SampleLoaderAIFF.cpp SampleLoaderALL.cpp \
SampleLoaderAbstract.cpp SampleLoaderGeneric.cpp SampleLoaderIFF.cpp \
SampleLoaderWAV.cpp XIInstrument.cpp XMFile.cpp XModule.cpp \
drivers/alsa/AudioDriver_ALSA.cpp drivers/jack/AudioDriver_JACK.cpp \
drivers/sdl/AudioDriver_SDL.cpp

noinst_HEADERS = AudioDriverBase.h AudioDriverManager.h \
AudioDriver_COMPENSATE.h AudioDriver_NULL.h AudioDriver_WAVWriter.h \
ChannelMixer.h LittleEndian.h Loaders.h MasterMixer.h midifile.h MilkyPlay.h \
MilkyPlayCommon.h MilkyPlayTypes.h Mixable.h PlayerBase.h PlayerGeneric.h \
PlayerSTD.h ResamplerAmiga.h ResamplerCubic.h ResamplerFactory.h \
ResamplerFast.h ResamplerMacros.h ResamplerSinc.h SampleLoaderAIFF.h \
SampleLoaderALL.h SampleLoaderAbstract.h SampleLoaderGeneric.h \
SampleLoaderIFF.h SampleLoaderWAV.h XIInstrument.h XMFile.h XModule.h \
computed-blep.h drivers/alsa/AudioDriver_ALSA.h \
drivers/jack/AudioDriver_JACK.h drivers/sdl/AudioDriver_SDL.h

INCLUDES = -I$(top_srcdir)/src/milkyplay \
-I$(top_srcdir)/src/milkyplay/drivers/generic \
-I$(top_srcdir)/src/milkyplay/drivers/jack \
-I$(top_srcdir)/src/milkyplay/drivers/sdl

AM_CPPFLAGS = -DMILKYTRACKER -D__THREADTIMER__ -DDRIVER_UNIX ${SDL_CFLAGS}
all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu src/milkyplay/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu src/milkyplay/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):
$(am__aclocal_m4_deps):

clean-noinstLIBRARIES:
	-test -z "$(noinst_LIBRARIES)" || rm -f $(noinst_LIBRARIES)
libmilkyplay.a: $(libmilkyplay_a_OBJECTS) $(libmilkyplay_a_DEPENDENCIES) 
	-rm -f libmilkyplay.a
	$(libmilkyplay_a_AR) libmilkyplay.a $(libmilkyplay_a_OBJECTS) $(libmilkyplay_a_LIBADD)
	$(RANLIB) libmilkyplay.a

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/AudioDriverBase.Po
include ./$(DEPDIR)/AudioDriverManager.Po
include ./$(DEPDIR)/AudioDriver_ALSA.Po
include ./$(DEPDIR)/AudioDriver_JACK.Po
include ./$(DEPDIR)/AudioDriver_NULL.Po
include ./$(DEPDIR)/AudioDriver_SDL.Po
include ./$(DEPDIR)/AudioDriver_WAVWriter.Po
include ./$(DEPDIR)/ChannelMixer.Po
include ./$(DEPDIR)/ExporterXM.Po
include ./$(DEPDIR)/LittleEndian.Po
include ./$(DEPDIR)/Loader669.Po
include ./$(DEPDIR)/LoaderAMF.Po
include ./$(DEPDIR)/LoaderAMS.Po
include ./$(DEPDIR)/LoaderCBA.Po
include ./$(DEPDIR)/LoaderDBM.Po
include ./$(DEPDIR)/LoaderDIGI.Po
include ./$(DEPDIR)/LoaderDSM.Po
include ./$(DEPDIR)/LoaderDTM.Po
include ./$(DEPDIR)/LoaderFAR.Po
include ./$(DEPDIR)/LoaderGDM.Po
include ./$(DEPDIR)/LoaderIMF.Po
include ./$(DEPDIR)/LoaderIT.Po
include ./$(DEPDIR)/LoaderMDL.Po
include ./$(DEPDIR)/LoaderMID.Po
include ./$(DEPDIR)/LoaderMOD.Po
include ./$(DEPDIR)/LoaderMTM.Po
include ./$(DEPDIR)/LoaderMXM.Po
include ./$(DEPDIR)/LoaderOKT.Po
include ./$(DEPDIR)/LoaderPLM.Po
include ./$(DEPDIR)/LoaderPSM.Po
include ./$(DEPDIR)/LoaderPTM.Po
include ./$(DEPDIR)/LoaderS3M.Po
include ./$(DEPDIR)/LoaderSTM.Po
include ./$(DEPDIR)/LoaderULT.Po
include ./$(DEPDIR)/LoaderUNI.Po
include ./$(DEPDIR)/LoaderXM.Po
include ./$(DEPDIR)/MasterMixer.Po
include ./$(DEPDIR)/PlayerBase.Po
include ./$(DEPDIR)/PlayerGeneric.Po
include ./$(DEPDIR)/PlayerSTD.Po
include ./$(DEPDIR)/ResamplerFactory.Po
include ./$(DEPDIR)/SampleLoaderAIFF.Po
include ./$(DEPDIR)/SampleLoaderALL.Po
include ./$(DEPDIR)/SampleLoaderAbstract.Po
include ./$(DEPDIR)/SampleLoaderGeneric.Po
include ./$(DEPDIR)/SampleLoaderIFF.Po
include ./$(DEPDIR)/SampleLoaderWAV.Po
include ./$(DEPDIR)/XIInstrument.Po
include ./$(DEPDIR)/XMFile.Po
include ./$(DEPDIR)/XModule.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

midifile.o:
	gcc  midifile.c  -Wall -c -g -std=c99  -o $@ 
	
AudioDriver_ALSA.o: drivers/alsa/AudioDriver_ALSA.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AudioDriver_ALSA.o -MD -MP -MF $(DEPDIR)/AudioDriver_ALSA.Tpo -c -o AudioDriver_ALSA.o `test -f 'drivers/alsa/AudioDriver_ALSA.cpp' || echo '$(srcdir)/'`drivers/alsa/AudioDriver_ALSA.cpp
	$(am__mv) $(DEPDIR)/AudioDriver_ALSA.Tpo $(DEPDIR)/AudioDriver_ALSA.Po
#	source='drivers/alsa/AudioDriver_ALSA.cpp' object='AudioDriver_ALSA.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AudioDriver_ALSA.o `test -f 'drivers/alsa/AudioDriver_ALSA.cpp' || echo '$(srcdir)/'`drivers/alsa/AudioDriver_ALSA.cpp

AudioDriver_ALSA.obj: drivers/alsa/AudioDriver_ALSA.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AudioDriver_ALSA.obj -MD -MP -MF $(DEPDIR)/AudioDriver_ALSA.Tpo -c -o AudioDriver_ALSA.obj `if test -f 'drivers/alsa/AudioDriver_ALSA.cpp'; then $(CYGPATH_W) 'drivers/alsa/AudioDriver_ALSA.cpp'; else $(CYGPATH_W) '$(srcdir)/drivers/alsa/AudioDriver_ALSA.cpp'; fi`
	$(am__mv) $(DEPDIR)/AudioDriver_ALSA.Tpo $(DEPDIR)/AudioDriver_ALSA.Po
#	source='drivers/alsa/AudioDriver_ALSA.cpp' object='AudioDriver_ALSA.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AudioDriver_ALSA.obj `if test -f 'drivers/alsa/AudioDriver_ALSA.cpp'; then $(CYGPATH_W) 'drivers/alsa/AudioDriver_ALSA.cpp'; else $(CYGPATH_W) '$(srcdir)/drivers/alsa/AudioDriver_ALSA.cpp'; fi`

AudioDriver_JACK.o: drivers/jack/AudioDriver_JACK.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AudioDriver_JACK.o -MD -MP -MF $(DEPDIR)/AudioDriver_JACK.Tpo -c -o AudioDriver_JACK.o `test -f 'drivers/jack/AudioDriver_JACK.cpp' || echo '$(srcdir)/'`drivers/jack/AudioDriver_JACK.cpp
	$(am__mv) $(DEPDIR)/AudioDriver_JACK.Tpo $(DEPDIR)/AudioDriver_JACK.Po
#	source='drivers/jack/AudioDriver_JACK.cpp' object='AudioDriver_JACK.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AudioDriver_JACK.o `test -f 'drivers/jack/AudioDriver_JACK.cpp' || echo '$(srcdir)/'`drivers/jack/AudioDriver_JACK.cpp

AudioDriver_JACK.obj: drivers/jack/AudioDriver_JACK.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AudioDriver_JACK.obj -MD -MP -MF $(DEPDIR)/AudioDriver_JACK.Tpo -c -o AudioDriver_JACK.obj `if test -f 'drivers/jack/AudioDriver_JACK.cpp'; then $(CYGPATH_W) 'drivers/jack/AudioDriver_JACK.cpp'; else $(CYGPATH_W) '$(srcdir)/drivers/jack/AudioDriver_JACK.cpp'; fi`
	$(am__mv) $(DEPDIR)/AudioDriver_JACK.Tpo $(DEPDIR)/AudioDriver_JACK.Po
#	source='drivers/jack/AudioDriver_JACK.cpp' object='AudioDriver_JACK.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AudioDriver_JACK.obj `if test -f 'drivers/jack/AudioDriver_JACK.cpp'; then $(CYGPATH_W) 'drivers/jack/AudioDriver_JACK.cpp'; else $(CYGPATH_W) '$(srcdir)/drivers/jack/AudioDriver_JACK.cpp'; fi`

AudioDriver_SDL.o: drivers/sdl/AudioDriver_SDL.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AudioDriver_SDL.o -MD -MP -MF $(DEPDIR)/AudioDriver_SDL.Tpo -c -o AudioDriver_SDL.o `test -f 'drivers/sdl/AudioDriver_SDL.cpp' || echo '$(srcdir)/'`drivers/sdl/AudioDriver_SDL.cpp
	$(am__mv) $(DEPDIR)/AudioDriver_SDL.Tpo $(DEPDIR)/AudioDriver_SDL.Po
#	source='drivers/sdl/AudioDriver_SDL.cpp' object='AudioDriver_SDL.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AudioDriver_SDL.o `test -f 'drivers/sdl/AudioDriver_SDL.cpp' || echo '$(srcdir)/'`drivers/sdl/AudioDriver_SDL.cpp

AudioDriver_SDL.obj: drivers/sdl/AudioDriver_SDL.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AudioDriver_SDL.obj -MD -MP -MF $(DEPDIR)/AudioDriver_SDL.Tpo -c -o AudioDriver_SDL.obj `if test -f 'drivers/sdl/AudioDriver_SDL.cpp'; then $(CYGPATH_W) 'drivers/sdl/AudioDriver_SDL.cpp'; else $(CYGPATH_W) '$(srcdir)/drivers/sdl/AudioDriver_SDL.cpp'; fi`
	$(am__mv) $(DEPDIR)/AudioDriver_SDL.Tpo $(DEPDIR)/AudioDriver_SDL.Po
#	source='drivers/sdl/AudioDriver_SDL.cpp' object='AudioDriver_SDL.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AudioDriver_SDL.obj `if test -f 'drivers/sdl/AudioDriver_SDL.cpp'; then $(CYGPATH_W) 'drivers/sdl/AudioDriver_SDL.cpp'; else $(CYGPATH_W) '$(srcdir)/drivers/sdl/AudioDriver_SDL.cpp'; fi`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES) $(HEADERS)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-noinstLIBRARIES mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-noinstLIBRARIES ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am

 \
EXTRA_DIST = PlayerFAR.cpp PlayerFAR.h PlayerIT.cpp PlayerIT.h \
drivers/generic/AudioDriver_PORTAUDIO.cpp \
drivers/generic/AudioDriver_PORTAUDIO.h \
drivers/generic/AudioDriver_RTAUDIO.cpp drivers/generic/AudioDriver_RTAUDIO.h \
drivers/generic/RtAudio3Impl.cpp drivers/generic/RtAudio4Impl.cpp \
drivers/generic/portaudio/portaudio.h drivers/generic/rtaudio/RtAudio3.cpp \
drivers/generic/rtaudio/RtAudio3.h drivers/generic/rtaudio/RtAudio4.cpp \
drivers/generic/rtaudio/RtAudio4.h drivers/generic/rtaudio/RtError3.h \
drivers/generic/rtaudio/RtError4.h drivers/generic/rtaudio/asio/asio.cpp \
drivers/generic/rtaudio/asio/asio.h \
drivers/generic/rtaudio/asio/asiodrivers.cpp \
drivers/generic/rtaudio/asio/asiodrivers.h \
drivers/generic/rtaudio/asio/asiodrvr.h \
drivers/generic/rtaudio/asio/asiolist.cpp \
drivers/generic/rtaudio/asio/asiolist.h drivers/generic/rtaudio/asio/asiosys.h \
drivers/generic/rtaudio/asio/ginclude.h \
drivers/generic/rtaudio/asio/iasiodrv.h \
drivers/generic/rtaudio/asio/iasiothiscallresolver.cpp \
drivers/generic/rtaudio/asio/iasiothiscallresolver.h \
drivers/generic/rtaudio/oss/soundcard.h drivers/osx/AudioDriver_COREAUDIO.cpp \
drivers/osx/AudioDriver_COREAUDIO.h drivers/psp/AudioDriver_PSP.cpp \
drivers/psp/AudioDriver_PSP.h drivers/windows/AudioDriver_MMSYSTEM.cpp \
drivers/windows/AudioDriver_MMSYSTEM.h

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
